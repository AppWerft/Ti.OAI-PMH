/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.oaipmh;

import java.io.UnsupportedEncodingException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;

import cz.msebera.android.httpclient.Header;

@Kroll.module(name = "Oaipmh", id = "de.appwerft.oaipmh")
public class OaipmhModule extends KrollModule {
	final String URL = "http://www.openarchives.org/pmh/registry/ListFriends";
	private final String LCAT = "OAI";
	private String filter;
	private Context ctx = TiApplication.getInstance().getApplicationContext();
	private KrollFunction onErrorCallback;
	private KrollFunction onLoadCallback;

	public OaipmhModule() {
		super();
	}

	@Kroll.method
	public void getList(KrollDict options) {
		if (options.containsKeyAndNotNull("filter")) {
			this.filter = options.getString("filter");
		}

		if (options.containsKeyAndNotNull(TiC.PROPERTY_ONLOAD)) {
			Object cb = options.get(TiC.PROPERTY_ONLOAD);
			if (cb instanceof KrollFunction) {
				this.onLoadCallback = (KrollFunction) cb;
			}
		}
		if (options.containsKeyAndNotNull(TiC.PROPERTY_ONERROR)) {
			Object cb = options.get(TiC.PROPERTY_ONERROR);
			if (cb instanceof KrollFunction) {
				this.onErrorCallback = (KrollFunction) cb;
			}
		}
		AsyncHttpClient client = new AsyncHttpClient();
		client.setTimeout(30000);
		client.get(ctx, URL, new XMLResponseHandler());
	}

	private final class XMLResponseHandler extends AsyncHttpResponseHandler {
		@Override
		public void onFailure(int status, Header[] header, byte[] response,
				Throwable arg3) {
			if (onErrorCallback != null)
				onErrorCallback.call(getKrollObject(), new KrollDict());
		}

		@Override
		public void onSuccess(int status, Header[] header, byte[] response) {
			String charset = "UTF-8";
			for (int i = 0; i < header.length; i++) {
				if (header[i].getName() == "Content-Type") {
					String[] parts = header[i].getValue().split("; ");
					if (parts != null) {
						charset = parts[1].replace("charset=", "")
								.toUpperCase();
					}
				}
			}
			String xml = "";
			try {
				xml = new String(response, charset);
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			}
			if (!xml.contains("<?xml ")) {
				if (onErrorCallback != null) {
					onErrorCallback.call(getKrollObject(), new KrollDict());
				}
				return;
			}
			org.json.jsonjava.JSONArray providerlist = org.json.jsonjava.XML
					.toJSONObject(xml).getJSONObject("BaseURLs")
					.getJSONArray("baseURL");
			KrollDict res = new KrollDict();
			KrollDict providers = new KrollDict();

			for (int i = 0; i < providerlist.length(); i++) {
				Object obj = providerlist.get(i);
				if (obj instanceof org.json.jsonjava.JSONObject) {
					org.json.jsonjava.JSONObject provider = (org.json.jsonjava.JSONObject) obj;
					String url = provider.getString("content");
					String id = provider.getString("id");
					if (filter == null || url.contains(filter))
						providers.put(id, url);
				}

				// res.put(provider.getString("id"),
				// provider.getString("content"));
			}
			res.put("providers", providers);
			if (onLoadCallback != null)
				onLoadCallback.call(getKrollObject(), res);

		}
	}
}
