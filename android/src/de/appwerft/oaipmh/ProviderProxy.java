/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.oaipmh;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;

import cz.msebera.android.httpclient.Header;

// This proxy can be created by calling Oaipmh.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = OaipmhModule.class)
public class ProviderProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "OAI";
	Context ctx = TiApplication.getInstance().getApplicationContext();
	private String ENDPOINT;
	KrollFunction onErrorCallback;
	KrollFunction onLoadCallback;

	// Constructor
	public ProviderProxy() {
		super();
	}

	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		if (options.containsKeyAndNotNull(TiC.PROPERTY_URL)) {
			final URI uri;
			try {
				uri = new URI(options.getString(TiC.PROPERTY_URL));
				this.ENDPOINT = uri.toString();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}

	}

	@Kroll.method
	public void identify(KrollDict options) {
		new OAI_Identify(ENDPOINT, options, getKrollObject());
	}

	@Kroll.method
	public void listIdentifiers(KrollDict options) {
		new OAI_listIdentifiers(ENDPOINT, options, getKrollObject());
	}

	@Kroll.method
	public void getRecord(KrollDict options) {
		new OAI_GetRecord(ENDPOINT, options, getKrollObject());
	}
}