/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.oaipmh;

import java.net.URI;
import java.net.URISyntaxException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;

import android.content.Context;

// This proxy can be created by calling Oaipmh.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = OaipmhModule.class)
public class ProviderProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "OAI ðŸ“™ðŸ“•";
	Context ctx = TiApplication.getInstance().getApplicationContext();
	private String ENDPOINT;
	KrollFunction onErrorCallback;
	KrollFunction onLoadCallback;
	private int timeout = 7000;
	private int retries = 1;
	public boolean stopped = false;

	// Constructor
	public ProviderProxy() {
		super();
	}

	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		if (options.containsKeyAndNotNull(TiC.PROPERTY_URL)) {
			final URI uri;
			try {
				uri = new URI(options.getString(TiC.PROPERTY_URL));
				this.ENDPOINT = uri.toString();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
		if (options.containsKeyAndNotNull(TiC.PROPERTY_TIMEOUT)) {
			timeout = options.getInt(TiC.PROPERTY_TIMEOUT);
		}
		if (options.containsKeyAndNotNull("retries")) {
			retries = options.getInt("retries");
		}
	}

	@Kroll.method
	public void abort() {
		onLoadCallback = null;
	}

	@Kroll.method
	public void Identify(Object dummy,
			@Kroll.argument(optional = true) KrollFunction _onload,
			@Kroll.argument(optional = true) KrollFunction _onerror) {
		new OAI_Adapter(ENDPOINT, retries, timeout, "Identify", null,
				getKrollObject(), _onload, _onerror);
	}

	@Kroll.method
	public void ListIdentifiers(KrollDict _options,
			@Kroll.argument(optional = true) KrollFunction _onload,
			@Kroll.argument(optional = true) KrollFunction _onerror) {
		new OAI_Adapter(ENDPOINT, retries, timeout, "ListIdentifiers",
				_options, getKrollObject(), _onload, _onerror);
	}

	@Kroll.method
	public void ListMetadataFormats(Object dummy,
			@Kroll.argument(optional = true) KrollFunction _onload,
			@Kroll.argument(optional = true) KrollFunction _onerror) {
		new OAI_Adapter(ENDPOINT, retries, timeout, "ListMetadataFormats",
				null, getKrollObject(), _onload, _onerror);
	}

	@Kroll.method
	public void ListRecords(KrollDict _options,
			@Kroll.argument(optional = true) KrollFunction _onload,
			@Kroll.argument(optional = true) KrollFunction _onerror) {
		_options.put("metadataPrefix", "oai_dc");
		new OAI_Adapter(ENDPOINT, retries, timeout, "ListRecords", _options,
				getKrollObject(), _onload, _onerror);
	}

	@Kroll.method
	public void GetRecord(KrollDict _options,
			@Kroll.argument(optional = true) KrollFunction _onload,
			@Kroll.argument(optional = true) KrollFunction _onerror) {
		new OAI_Adapter(ENDPOINT, retries, timeout, "GetRecord", _options,
				getKrollObject(), _onload, _onerror);
	}

	@Kroll.method
	public void ListSets(Object dummy,
			@Kroll.argument(optional = true) KrollFunction _onload,
			@Kroll.argument(optional = true) KrollFunction _onerror) {
		new OAI_Adapter(ENDPOINT, retries, timeout, "ListSets", null,
				getKrollObject(), _onload, _onerror);
	}
}